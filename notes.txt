const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const PORT = 5000
require('dotenv').config();
const UserModel = require('./model/userSchema')
const app = express();
app.use(express())
app.use(express.json());
app.use(cors({
    origin: 'https://localhost:3000',
    methods:["GET","POST"],
    credentials:true
}));
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  })
  .then(()=>{
    console.log('mongodb connected successfully')
  })
  .catch((error) => {
    console.error('MongoDB connection error:', error);
  });
 app.get('/', (req, res) => {
    res.json({message:"hello world"})
 })
 const verifyUser=(req,res,next)=>{
    const token = req.cookie.token
    if(!token){
        return res.json("Token is missing")
    }
    else{
        jwt.verify(token,"jwtsecretkey",(err,decoded) => {
            if(err){
                return res.json("Error with Token")
            }
            else{
                if(decoded.role == "admin"){
                    next()
                }
                else{
                    return res.json("not admin")
                }
                    
            }
        })
    }
 }
 app.get('/dashboard',verifyUser,(req, res) => {
    res.json("Success")
 })
 app.post('/register', (req, res) => {
    const {email,password} =req.body
    bcrypt.hash(password,10)
    .then(hash =>{
        UserModel.findOne({email: email}).then(user =>{
           if(user){
            res.json("user already exists")
           }
           else{
            bcrypt.hash(password,10)
            .then(hash =>{
                UserModel.create({email: email,password:hash})
            })
            .catch(err =>{
                res.json(err)
            })
           }
        }).catch(err =>res.json(err))
    } )
 })

 app.post('/login', (req, res) =>{
    const {email,password} = req.body;
    UserModel.findOne({email:email})
    .then(user=>{
        if(user){
          bcrypt.compare(password,user.password,(err,res)=>{ 
            if(res){
             const token = jwt.sign({email:user.email,role:user.role},"jwtsecretkey",{expiresIn:'1d'})
             res.cookie('token',token)
             return res.json({status:200,role:user.role})
            }else{
               return res.json("Invalid credentials")
            }
          })
        }
        else{ 
            return res.json("User not found")
        }
    })
 })

app.listen((PORT),()=>{
    console.log('server is running on port',PORT)
})